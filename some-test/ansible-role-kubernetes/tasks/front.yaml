---
- set_fact: kube_pod_network_cidr='10.244.0.0/16'
  when: kube_network == 'flannel'

- set_fact: kube_pod_network_cidr='192.168.0.0/16'
  when: kube_network == 'calico'

- name: force handlers
  meta: flush_handlers

- name: Kubeadm init
  command: kubeadm init --pod-network-cidr={{kube_pod_network_cidr}} --token={{kube_token}} --apiserver-advertise-address={{kube_api_server}} creates=/etc/kubernetes/admin.conf

- lineinfile:
    dest: /etc/sysctl.d/k8s.conf
    regexp: '^net.bridge.bridge-nf-call-iptables'
    line: 'net.bridge.bridge-nf-call-iptables = 1'
    create: yes
  notify: sysctl-system
  when: kube_network == 'flannel' or kube_network == 'kube-router' or kube_network == 'romana'

- block:
    - copy: src=flannel-net.yml dest=/tmp/flannel-net.yml
    - command: kubectl apply -f /tmp/flannel-net.yml creates=/etc/cni/net.d/10-flannel.conf
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_network == 'flannel'

- block:
    - copy: src=calico-net.yaml dest=/tmp/calico-net.yaml
    - command: kubectl apply -f /tmp/calico-net.yaml creates=/var/etcd/calico-data
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_network == 'calico'

- block:
    - copy: src=romana-net.yml dest=/tmp/romana-net.yml
    - command: kubectl apply -f /tmp/romana-net.yml creates=/var/lib/romana/etcd-db
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_network == 'romana'

- block:
    - copy: src=kuberouter-net.yaml dest=/tmp/kuberouter-net.yaml
    - command: kubectl apply -f /tmp/kuberouter-net.yaml creates=/etc/cni/net.d/10-kuberouter.conf
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_network == 'kube-router'

- block:
    - copy: src=weave-net.yaml dest=/tmp/weave-net.yaml
    - command: kubectl apply -f /tmp/weave-net.yaml creates=/etc/cni/net.d/10-weave.conf
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_network == 'weave'

- include: helm.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_install_helm

- name: Deploy Dashboard
  command: kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  ignore_errors: yes
  when: kube_deploy_dashboard  

- name: Add Kube API server options
  lineinfile:
    dest: /etc/kubernetes/manifests/kube-apiserver.yaml
    line: '    - {{item.option}}={{item.value}}'
    regexp: '^    - {{item.option}}='
    insertafter: '    - kube-apiserver'
  notify: restart kubeapi
  with_items: "{{ kube_apiserver_options }}"

- copy:
    dest: /etc/profile.d/kube.sh
    content: "export KUBECONFIG=/etc/kubernetes/admin.conf"
